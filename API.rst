API
===

API is built using `Django REST Faramework <http://django-rest-framework.org/`_.
Flllowing is a list of available API calls with short description. API calls that
expected to return single object instance return HTTP status 404 if object cannot
be found. All API calls that return some content use JSON-encoding.


GET /api/client/current
-----------------------

Retrieve client object matching current user


GET /api/client/:client_slug
----------------------------

Retrieve client object matching ``client_slug``.


GET /api/client/:client_slug/summary
------------------------------------

Retrieve client summary consisting of following named values:

	``totat_customers``
		Number of customers in database

	``redeemers``
		Number of customers that redeemed coupon

	``new_signups``
		Number of new customers


GET /api/client/:client_slug/customer_fields
--------------------------------------------

Retrieve customer fields information for the client as a object/hash with the following fields:

	``available_customer_fields``
		Unordered list of customer field **objects**

	``display_customer_fields``
		Ordered list of customer field **names**

Each customer field object consists of the following fields:

	``name``
		Short field name

	``title``
		Field description suitable as form input labels or table column captions

	``type``
		Field type

	``required``
		Whether or not this field is mandatory for every customer of this client


PUT /api/client/:client_slug/customer_fields
--------------------------------------------

Update customer fields to display on customer list. Request JSON-encoded body should have
the following parameters:

	``display_customer_fields``
		List of customer field **names**

Response is JSON-encoded objec/hash and includes the following fields:

	``display_customers_fields``
		List of customer field **names** as it's been saved on server.

		**Note** This can be different from what was in request due to filtering
		and other reasons.


GET /api/client/:client_slug/customers
--------------------------------------

Retrieve list of client's customers. Each customer object consists of the following fields:

	``id``
		Customer ID

	``data``
		Object with dynamic set of fields. Its content depends on what is stored in
		database but can be restricted by ``fields`` qery string parameter

The following query string parameters can be used to contol result:

	``offset``
		Skip first ``offset`` number of customers. If omitted no customers skipped

	``limit``
		Limit number of returend customers to ``limit``. If omitted no limit is set

	``fields``
		Comma-separated list of field names to include into data field. Must be a
		subset of client's customer fields set. If not specified all fields will be included
		in response. Example:

			GET /api/client/abc/customers?fields=email,first_name,last_name,dob,phone

	``order``
		Ordered list of comma-separated field names. Controls sorting order of customer objects.
		If name is prefixed with "-" descending order on that field is used. If not specified
		order is not determined. Example:

			GET /api/client/abc/customers?order=-dob,last_name

	``search``
		Do full-text search across customer list. Example:

			GET /api/client/abc/customers?search=John+Doe

Any combination of qury string parameters is allowed as long as there is only one of each parameter.
``limit`` and ``offset`` parameters are applied after ``search`` and ``order``, that's it customers
are filtered by search criteria, then sorted according to ``order`` then ``offset`` and ``limit`` applied
on resulting list.


GET /api/client/:client_slug/signup_forms
-----------------------------------------

Retrieve list of client's signup form objects in JSON format. Each object contains the following fields:

	``slug``
		Signup form slug. Unique for the client.

	``url``
		Signup form URL. Generated by backend based on slug.

	``status``
		Status of the form. Possible values "draft" and "published"

	``data``
		Object with unspecified content. Normally, the content is accepted from front-end
		as-is and can be used by form editor / renderer.


POST /api/client/:client_slug/signup_forms
------------------------------------------

Create new signup form. Expects JSON-formatted object with the following fields:

	``slug``
		Signup form slug. Unique for the client.

	``status``
		Status of the form. Possible values "draft" and "published"

	``data``
		Object with unspecified content. Form editor can use this to pass parameters to
		renderer.


GET /api/client/:client_slug/signup_forms/:form_slug
---------------------------------------------------

Retrieve information on signup form with given slug. Returns single JSON-encoded signup form object.
This can be used to verify if form with some slug already exists.


PUT /api/client/:client_slug/signup_forms/:form_slug
---------------------------------------------------

Update form. Expects JSON-encoded object with the following fields:

	``data``
		Object with unspecified content

	``status``
		Status of the form. Possible values "draft" and "published"


GET /api/client/:client_slug/images
-----------------------------------

Retrieve JSON-encoded list of Image objects. Each object contains following fields:

	``id``
		Unique image ID

	``type``
		Information about image type. Currently, this filed can have one of the following values:

			``s``
				Small image
			``m``
				Medium image
			``b``
				Big image
	``content_type``
		Image content MIME-type. Examples: "image/jpeg", "image/png"

	``url``
		Image URL


POST /api/client/:client_slug/images
------------------------------------

Upload new image. Expects JSON-formatted objects with the following fields:

	``type``
		MIME type of file being uploaded

	``data``
		Base64-encoded file content


If request handled without errors response will have JSON-encoded image object matching uploaded image
with the following fields:

	``id``
		Unique image ID

	``content_type``
		MIME type of file

	``url``
		URL of file. This URL is generated based on file content so uploading exactly the same
		file more than once would be responded with HTTP 400 status code.


DELETE /api/client/:client_slug/:image_id
-----------------------------------------

Delete existing image. Returns response with 204 HTTP status code and no content if image was deleted.
Returns HTTP code 404 if image was not found and code 400 if image was not deleted for any other reson.


POST /api/client/:client_slug/customers/import
----------------------------------------------

Upload file to Initiate customers import process. Request is standart POST request with file sent as request body.
Response is JSON-encoded object with the following attributes:

	``import_request_id``
		Unique import request ID

	``available_fields``
		List of field objects with the following attributes:

			``name``
				Unique field name

			``title``
				Field title

			``type``
				Field type

			``required``
				Whether or not this field is required

	``import_fields``
		List of `source-field-name`, `destination-field-name` pairs as guessed by server with `destination-field-name`
		being optional. This is not what will be imported but simply an attempt to assist client in makeing the list.


GET /api/client/:client_slug/customers/import/:import_request_id
----------------------------------------------------------------

Retrieve status of import request. Response is JSON-encoded object with the following attributes:

	``status``
		One of "new", "in-progress", "complete", "aborted", "failed"

	``imported``
		Number of successfully imported customers.

	``failed``
		Number of records that couldn't be imported.

	``errors``
		List of error messages


PUT /api/client/:client_slug/customers/import/:import_request_id
-----------------------------------------------------------------

Start import process. Request is JSON-encoded object with the following attributes:

	``import_fields``
		Start this import request. Value if that atribute is a list of `source-field-name`, `destination-field-name` pairs.
		Unlike in response to previous API call `destination-field-name` is required but there could be less pairs
		than fields in file being imported.
		It is allowed to use the same `source-field-name` more than once.The same `destination-field-name` may not be used
		more than once. 


DELETE /api/client/:client_slug/customers/import/:import_request_id
-------------------------------------------------------------------

Abort import process. The response is JSON-encoded object with the following attributes:

	``status``
		Either "complete" or"aborted" depending on whether or not import was complete at the time this request was handled.

